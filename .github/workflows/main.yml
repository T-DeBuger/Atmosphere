name: Build Atmosphère

on:
  workflow_dispatch:

env:
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout Atmosphère
      uses: actions/checkout@v3

    - name: Cache devkitPro
      uses: actions/cache@v4
      with:
        path: |
          /opt/devkitpro
          ~/.dkp
        key: devkitpro-${{ runner.os }}-v1

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: pip-${{ runner.os }}-lz4
        restore-keys: |
          pip-${{ runner.os }}-

    - name: Cache ccache
      uses: actions/cache@v4
      with:
        path: ~/.ccache
        key: ccache-${{ runner.os }}-${{ hashFiles('**/*.cpp') }}
        restore-keys: |
          ccache-${{ runner.os }}-

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y curl wget gpg python3-pip build-essential ccache zip unzip

        # 安装 devkitPro 工具链（跳过 GPG 校验）
        echo "deb [trusted=yes] https://apt.devkitpro.org/ stable main" | sudo tee /etc/apt/sources.list.d/devkitpro.list
        sudo apt-get update
        sudo apt-get install -y devkitpro-pacman

        sudo dkp-pacman -Syu --noconfirm
        sudo dkp-pacman -S --noconfirm devkitA64 devkitARM switch-dev switch-glm switch-libjpeg-turbo hactool

        # Python 依赖
        pip3 install lz4

    - name: Setup environment variables
      run: |
        echo "DEVKITPRO=/opt/devkitpro" >> $GITHUB_ENV
        echo "DEVKITARM=/opt/devkitpro/devkitARM" >> $GITHUB_ENV
        echo "DEVKITA64=/opt/devkitpro/devkitA64" >> $GITHUB_ENV
        echo "PATH=/opt/devkitpro/devkitARM/bin:/opt/devkitpro/devkitA64/bin:$PATH" >> $GITHUB_ENV

    - name: Setup ccache
      run: |
        export CC="ccache gcc"
        export CXX="ccache g++"
        export CCACHE_DIR=~/.ccache
        ccache -M 2G

    - name: Build Atmosphère
      run: |
        make nx_release

    - name: Unzip and repackage Atmosphère
      run: |
        release_dir=$(find out -type d -path "out/nintendo_*/release" | head -n 1)
        zip_file=$(find "$release_dir" -name "atmosphere-*.zip" | head -n 1)
        echo "Found zip: $zip_file"

        mkdir -p unpacked
        unzip -q "$zip_file" -d unpacked

        inner_dir=$(find unpacked -mindepth 1 -maxdepth 1 -type d | head -n 1)
        cp "$release_dir/fusee.bin" "$inner_dir/"

        cd "$inner_dir"
        zip -rq ../../atmosphere.zip .
        cd -

    - name: Set tag and release name
      run: |
        echo "TAG_NAME=$(date +%Y%m%d-%H%M%S)" >> $GITHUB_ENV
        echo "RELEASE_NAME=Atmosphère Build $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV

    - name: Create GitHub Release
      uses: ncipollo/release-action@v1
      with:
        name: ${{ env.RELEASE_NAME }}
        tag: ${{ env.TAG_NAME }}
        allowUpdates: false
        commit: master
        token: ${{ secrets.actions_release }}
        body: "最新构建版本，包含 atmosphere.zip 和 fusee.bin"
        artifacts: atmosphere.zip

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.3.2
      with:
        keep_latest: 5
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.actions_release }}

    - name: Trigger B repository workflow
      uses: peter-evans/repository-dispatch@v2
      with:
        token: ${{ secrets.actions_release }}
        repository: T-DeBuger/SwitchNX
        event-type: build-complete
