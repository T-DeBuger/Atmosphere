name: Build Atmosphère

on:
  workflow_dispatch:

env:
  TZ: Asia/Shanghai
  DEVKITPRO: /opt/devkitpro
  DEVKITARM: /opt/devkitpro/devkitARM
  DEVITA64: /opt/devkitpro/devkitA64

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout Atmosphère
      uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y curl wget gpg python3-pip build-essential ccache zip unzip
        # 安装 devkitPro 工具链
        echo "deb [trusted=yes] https://apt.devkitpro.org/ stable main" | sudo tee /etc/apt/sources.list.d/devkitpro.list
        sudo apt-get update
        sudo apt-get install -y devkitpro-pacman
        
        # 配置 devkitPro 环境变量
        echo "$DEVKITPRO/tools/bin" >> $GITHUB_PATH
        
        # 调试：显示当前环境变量
        echo "当前环境变量:"
        env | sort
        
        # 调试：检查 devkitPro 安装
        echo "检查 devkitPro 安装:"
        if [ -d "$DEVKITPRO" ]; then
          echo "devkitPro 目录存在"
        else
          echo "错误: devkitPro 目录不存在"
          exit 1
        fi
        
        # 更新 devkitPro 包管理器
        echo "更新 devkitPro 包管理器..."
        sudo dkp-pacman -Syu --noconfirm || { echo "警告: 更新失败，继续安装..." ; }
        
        # 安装所需的 devkitPro 包
        echo "安装 devkitPro 工具链..."
        sudo dkp-pacman -S --noconfirm devkitA64 devkitARM switch-dev switch-glm switch-libjpeg-turbo hactool
        
        # Python 依赖
        pip3 install lz4

    - name: Setup environment variables
      run: |
        echo "$DEVKITARM/bin" >> $GITHUB_PATH
        echo "$DEVITA64/bin" >> $GITHUB_PATH
        
        # 验证环境变量
        echo "验证环境变量设置:"
        which dkp-pacman
        which aarch64-none-elf-gcc

    - name: Build Atmosphère
      run: |
        make nx_release

    - name: Unzip and repackage Atmosphère
      run: |
        release_dir=$(find out -type d -path "out/nintendo_*/release" | head -n 1)
        zip_file=$(find "$release_dir" -name "atmosphere-*.zip" | head -n 1)
        echo "Found zip: $zip_file"

        zip_name=$(basename "$zip_file" .zip)
        echo "ZIP_NAME=$zip_name" >> $GITHUB_ENV
        echo "ZIP_FILE=$zip_file" >> $GITHUB_ENV

        mkdir -p unpacked
        unzip -q "$zip_file" -d unpacked
        cp "$release_dir/fusee.bin" unpacked/
        cd unpacked
        zip -rq ../atmosphere.zip .
        cd -

    - name: Set tag and release name
      run: |
        echo "TAG_NAME=$(date +%Y%m%d-%H%M%S)" >> $GITHUB_ENV
        echo "RELEASE_NAME=${{ env.ZIP_NAME }} $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
        
    - name: Create GitHub Release
      uses: ncipollo/release-action@v1
      with:
        name: ${{ env.RELEASE_NAME }}
        tag: ${{ env.TAG_NAME }}
        allowUpdates: false
        commit: master
        token: ${{ secrets.actions_release }}
        body: "最新构建版本，包含 atmosphere.zip 和 fusee.bin"
        artifacts: atmosphere.zip

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.3.2
      with:
        keep_latest: 1
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.actions_release }}

    - name: Trigger repository workflow
      uses: peter-evans/repository-dispatch@v2
      with:
        token: ${{ secrets.actions_release }}
        repository: T-DeBuger/SwitchNX
        event-type: build-complete
