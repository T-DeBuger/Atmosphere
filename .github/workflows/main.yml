name: Build Atmosphère

on:
  workflow_dispatch:

env:
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout Atmosphère
      uses: actions/checkout@v3

    - name: Install base dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y curl wget gpg python3-pip build-essential ccache zip unzip zstd tar

    - name: Install devkitPro pacman manually
      run: |
        # 下载 devkitpro-pacman 安装包（v6.0.2）
        wget https://github.com/devkitPro/pacman/releases/download/v6.0.2/devkitpro-pacman-installer.pkg -O devkitpro-pacman.pkg.tar.zst
        
        # 解压安装
        mkdir devkitpro-installer
        tar --use-compress-program=unzstd -xvf devkitpro-pacman.pkg.tar.zst -C devkitpro-installer
        
        # 安装文件复制到系统目录
        sudo cp -r devkitpro-installer/* /

        # 添加 dkp-pacman 命令到 PATH（写入 GitHub Actions 环境变量）
        echo "/opt/devkitpro/pacman/bin" >> $GITHUB_PATH

    - name: Initialize and populate pacman keyring
      run: |
        sudo dkp-pacman-key --init || true
        sudo dkp-pacman-key --populate || true

    - name: Update and install devkitPro toolchains
      run: |
        sudo dkp-pacman -Syu --noconfirm || true
        sudo dkp-pacman -S --noconfirm devkitA64 devkitARM switch-dev switch-glm switch-libjpeg-turbo hactool || true

    - name: Install Python lz4
      run: |
        pip3 install lz4

    - name: Setup environment variables
      run: |
        echo "DEVKITPRO=/opt/devkitpro" >> $GITHUB_ENV
        echo "DEVKITARM=/opt/devkitpro/devkitARM" >> $GITHUB_ENV
        echo "DEVKITA64=/opt/devkitpro/devkitA64" >> $GITHUB_ENV
        echo "PATH=/opt/devkitpro/devkitARM/bin:/opt/devkitpro/devkitA64/bin:$PATH" >> $GITHUB_ENV

    - name: Build Atmosphère
      run: |
        make nx_release

    - name: Unzip and repackage Atmosphère
      run: |
        release_dir=$(find out -type d -path "out/nintendo_*/release" | head -n 1)
        zip_file=$(find "$release_dir" -name "atmosphere-*.zip" | head -n 1)
        echo "Found zip: $zip_file"

        zip_name=$(basename "$zip_file" .zip)
        echo "ZIP_NAME=$zip_name" >> $GITHUB_ENV
        echo "ZIP_FILE=$zip_file" >> $GITHUB_ENV

        mkdir -p unpacked
        unzip -q "$zip_file" -d unpacked
        cp "$release_dir/fusee.bin" unpacked/
        cd unpacked
        zip -rq ../atmosphere.zip .
        cd -

    - name: Set tag and release name
      run: |
        echo "TAG_NAME=$(date +%Y%m%d-%H%M%S)" >> $GITHUB_ENV
        echo "RELEASE_NAME=${{ env.ZIP_NAME }} $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV

    - name: Create GitHub Release
      uses: ncipollo/release-action@v1
      with:
        name: ${{ env.RELEASE_NAME }}
        tag: ${{ env.TAG_NAME }}
        allowUpdates: false
        commit: master
        token: ${{ secrets.actions_release }}
        body: "最新构建版本，包含 atmosphere.zip 和 fusee.bin"
        artifacts: atmosphere.zip

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.3.2
      with:
        keep_latest: 1
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.actions_release }}

    - name: Trigger repository workflow
      uses: peter-evans/repository-dispatch@v2
      with:
        token: ${{ secrets.actions_release }}
        repository: T-DeBuger/SwitchNX
        event-type: build-complete
